def build_model(hp):
    input_layer = layers.Input(shape=(X_train.shape[1],))
    
    x = layers.Dense(hp.Int('units_1', min_value=64, max_value=256, step=64), activation='relu')(input_layer)
    x = layers.Dropout(hp.Float('dropout_1', min_value=0.2, max_value=0.5, step=0.1))(x)
    x = layers.Dense(hp.Int('units_2', min_value=64, max_value=256, step=64), activation='relu')(x)
    x = layers.Dropout(hp.Float('dropout_2', min_value=0.2, max_value=0.5, step=0.1))(x)
    output_layer = layers.Dense(3, activation='softmax')(x)

    model = Model(inputs=input_layer, outputs=output_layer)
    
    model.compile(optimizer=Adam(learning_rate=hp.Float('learning_rate', min_value=1e-5, max_value=1e-2, sampling='LOG', default=1e-3)), loss='categorical_crossentropy', metrics=['accuracy'])
    
    return model


    tuner = kt.RandomSearch(
    build_model,
    objective='val_accuracy',
    max_trials=10,  
    executions_per_trial=3,  
    directory='kt_dir', 
    project_name='soccer_model_tuning'
)

# Run the hyperparameter search
tuner.search(X_train, y_train, epochs=100, validation_split=0.2, batch_size=32)

# Get the best model
best_hp = tuner.get_best_models(num_models=1)[0]
best_hp.evaluate(X_test, y_test)
best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]

best_model = tuner.hypermodel.build(best_hps)
best_history = best_model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1, class_weight=class_weight_dict, verbose=1)